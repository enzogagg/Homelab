- name: Update Docker image
  hosts: all
  become: yes
  tasks:
    - name: Check for new images
      shell: |
        docker images --format '{{ '{{' }}.Repository{{ '}}' }}:{{ '{{' }}.Tag{{ '}}' }}' | while read img; do
          latest=$(docker pull $img | grep 'Downloaded newer image' | wc -l)
          if [ "$latest" -gt 0 ]; then echo $img; fi
        done
      register: images_to_update
      changed_when: images_to_update.stdout != ""

    - name: Stop containers
      when: images_to_update.stdout != ""
      block:
        - name: Stopper les conteneurs
          shell: |
            echo '{{ images_to_update.stdout }}' > /tmp/images_list
            docker ps --format '{{ '{{' }}.Image{{ '}}' }} {{ '{{' }}.ID{{ '}}' }}' | grep -f /tmp/images_list | awk '{print $2}' | xargs -r docker stop
            rm /tmp/images_list
          args:
            executable: /bin/bash

    - name: Pull new images
      when: images_to_update.stdout != ""
      shell: "echo '{{ images_to_update.stdout }}' | xargs -I {} docker pull {}"

    - name: Restart containers
      when: images_to_update.stdout != ""
      shell: |
        echo '{{ images_to_update.stdout }}' > /tmp/images_list
        docker ps -a --format '{{ '{{' }}.Image{{ '}}' }} {{ '{{' }}.ID{{ '}}' }}' | grep -f /tmp/images_list | awk '{print $2}' | xargs -r docker start
        rm /tmp/images_list
      args:
        executable: /bin/bash

    - name: Check if containers are running
      when: images_to_update.stdout != ""
      shell: "docker ps --format '{{ '{{' }}.ID{{ '}}' }}' | xargs -r docker inspect --format='{{ '{{' }}.State.Running{{ '}}' }}'"
      register: check_running
      failed_when: "'false' in check_running.stdout"

    - name: Afficher les conteneurs mis Ã  jour
      debug:
        msg: "{{ docker_images_updated | to_json }}"